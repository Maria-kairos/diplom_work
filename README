# Дипломная работа: Использование возможностей фреймворка Django в практической деятельности

## Описание проекта
В современном мире веб-разработка играет ключевую роль в различных сферах деятельности. Фреймворк Django, будучи мощным инструментом для создания веб-приложений на языке Python, предоставляет разработчикам широкий спектр возможностей для решения как простых, так и сложных задач. Данная дипломная работа посвящена исследованию и применению этих возможностей на практике, с акцентом на создание реального, функционального веб-приложения.
Целью данной работы является не только изучение теоретических основ Django, но и демонстрация его практического применения. В рамках проекта будет разработано веб-приложение, предназначенное для организации системы записи на прием, демонстрируя такие ключевые возможности Django, как работа с моделями данных, обработка запросов, управление пользователями и интеграция с пользовательским интерфейсом.
Этот проект представляет собой демонстрационное веб-приложение, созданное с использованием фреймворка Django. Целью проекта является изучение и применение ключевых возможностей Django в решении практической задачи — организации системы записи на прием.

Проект включает в себя следующие основные компоненты:

*   Регистрацию и аутентификацию пользователей (с использованием кастомной модели пользователя).
*   Управление услугами (добавление, просмотр).
*   Запись на прием (выбор услуги и времени).
*   Простая система управления записями.

Проект демонстрирует:

*   Создание веб-приложений с использованием Django.
*   Использование Django ORM для взаимодействия с базой данных.
*   Управление пользователями и аутентификацию.
*   Использование Django templates для создания пользовательского интерфейса.
*   Обработку форм и POST-запросов.

## Технологии

*   **Python:** Основной язык программирования.
*   **Django:** Веб-фреймворк высокого уровня.
*   **SQLite:** Используется как база данных по умолчанию (но вы можете легко переключиться на PostgreSQL или MySQL).
*   **HTML, CSS, JavaScript (простой):** Для создания интерфейса.
*   **DB Browser for SQLite**: Используется для просмотра данных в базе данных.

## Установка и запуск

1.  **Клонировать репозиторий:**
    ```bash
    git clone saite
    cd saite
    ```
2.  **Создать виртуальное окружение (рекомендуется):**
    ```bash
    python -m venv venv
    source venv/bin/activate  # Для Linux/macOS
    venv\Scripts\activate # Для Windows
    ```
3.  **Установить зависимости:**
    ```bash
    pip install -r requirements.txt
    ```
    *   (Необходимо сгенерировать `requirements.txt` с помощью `pip freeze > requirements.txt` )
4.  **Применить миграции:**
    ```bash
    python manage.py makemigrations
    python manage.py migrate
    ```
5.  **Запустить сервер:**
    ```bash
    python manage.py runserver
    ```
6.  **Откройть приложение в браузере:**
    *   Перейдите в браузере по адресу `http://127.0.0.1:8000/`

## Использование

1.  **Регистрация:** Зарегистрируйте нового пользователя через форму на странице регистрации (`/register/`).
2.  **Запись на прием:** После входа вы перейдете на главную страницу, откуда можно перейти на страницу записи на прием (`/zapis/`), где можно выбрать услугу и время.
3.  **Просмотр записей:**  В текущей версии проекта нет отдельной страницы для просмотра записей, но они сохраняются в базе данных. Вы можете просмотреть их с помощью DB Browser for SQLite.

## Структура проекта
/ ├── center_app/ # Приложение Django │ ├── migrations/ # Миграции базы данных │ ├── models.py # Модели данных │ ├── views.py # Логика представлений │ ├── urls.py # URL-конфигурация приложения │ ├── templates/ # Шаблоны HTML │ └── forms.py # Формы Django ├── manage.py # Утилита командной строки Django ├── saite/ # Папка проекта │ ├── settings.py # Основные настройки проекта │ ├── urls.py # Конфигурация корневого URL │ └── wsgi.py # WSGI-сервер для производства ├── static/ # Статические файлы ├── db.sqlite3 # Файл базы данных └── requirements.txt # Зависимости проекта


## Замечания

*   Этот проект предназначен для демонстрационных целей и может быть расширен в будущем.
*   Для работы с базой данных рекомендуется использовать DB Browser for SQLite или аналогичные инструменты.
*   Если вы решите перейти на другую базу данных (например, PostgreSQL), вам придется обновить настройки базы данных в `settings.py`.

## Выполнила: Козлова Мария Александровна
